"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : {"default": mod};
};
Object.defineProperty(exports, "__esModule", {value: true});
const fs_extra_1 = __importDefault(require("fs-extra"));

class JsonStudentRepository {
    constructor(path = './src/persistence/data/students.json') {
        this.path = path;
    }

    getAllStudents() {
        return fs_extra_1.default.readJson(this.path)
            .catch((error) = > console.log(error.message)
    )
        ;
    }

    getStudentById(id) {
        return this.getAllStudents()
            .then((students) = > students.find((student) = > student.id === id
    ))
        ;
    }

    createStudent(postedStudent) {
        const id = postedStudent.id;
        return this.getStudentById(id)
            .then(student = > {
            if(student)
            throw new Error("student already exists.");
    else
        return this._save(postedStudent);
    })
        ;
    }

    updateStudent(postedStudent) {
        const id = postedStudent.id;
        return this.getAllStudents()
            .then(students = > {
            if(students.length !== 0
    )
        return students;
    else
        throw new Error("students do not exist.");
    })
    .
        catch(error = > {throw new Error(error.message);
    })
    .
        then(students = > {
            if(students.some(student = > student.id === id
    ))
        return [...students.filter(student = > student.id !== id
    )]
        ;
    else
        throw new Error("student does not exist.");
    })
    .
        catch(error = > {throw new Error(error.message);
    })
    .
        then(students = > [...students, postedStudent
    ])
    .
        catch(error = > {throw new Error(error.message);
    })
    .
        then(students = > fs_extra_1.default.writeFile(this.path, JSON.stringify(students))
    )
    .
        catch(error = > {throw new Error(error.message);
    })
        ;
    }

    deleteStudent(studentToDelete) {
        const id = studentToDelete.id;
        return this.getStudentById(id)
            .then(student = > {
            if(
        !student
    )
        throw new Error("student do not exist.");
    else
        return this._delete(studentToDelete);
    })
        ;
    }

    _save(student) {
        this.getAllStudents()
            .then(savedStudents = > savedStudents || []
    )
    .
        then(savedStudents = > {
            savedStudents.push(student);
        return savedStudents;
    })
    .
        then(savedStudents = > JSON.stringify(savedStudents)
    )
    .
        then(savedStudentsString = > fs_extra_1.default.writeFile(this.path, savedStudentsString)
    )
    .
        catch(error = > console.log(error)
    )
        ;
    }

    _delete(studentToDelete) {
        const id = studentToDelete.id;
        this.getAllStudents()
            .then(savedStudents = > savedStudents || []
    )
    .
        then(savedStudents = > {
            return savedStudents.filter(student = > student.id !== id
    )
        ;
    })
    .
        then(savedStudents = > JSON.stringify(savedStudents)
    )
    .
        then(savedStudentsString = > fs_extra_1.default.writeFile(this.path, savedStudentsString)
    )
    .
        catch(error = > console.log(error)
    )
        ;
    }
}

exports.default = JsonStudentRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,