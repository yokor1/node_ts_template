"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : {"default": mod};
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", {value: true});
const express_1 = __importDefault(require("express"));
const ResponseStatus = __importStar(require("./status"));

class StudentRouter {
    constructor(studentRepository) {
        this.studentRepository = studentRepository;
        this.router = express_1.default.Router();
        this.mountRoutes();
    }

    _addFilter() {
        this.router.param('id', (req, res, next, id) = > {
            if(isNaN(id)
    )
        next(`id ${id} is not a number. `);
    else
        next();
    })
        ;
    }

    mountRoutes() {
        this._addFilter();
        this.router.get('/', (req, res) = > {
            this.studentRepository.getAllStudents()
            .then(students = > res.status(ResponseStatus.OK).json(students)
    )
        ;
    })
        ;
        this.router.get(`/:id`, (req, res) = > {
            const id = req.params.id;
        this.studentRepository.getStudentById(id)
            .then(student = > {
            if(student)
            res.status(ResponseStatus.OK).send(student);
    else
        res.status(ResponseStatus.NOT_FOUND).send("Student not found.");
    })
        ;
    })
        ;
        this.router.post('/', (req, res) = > {
            const postedStudent = req.body;
        this.studentRepository.createStudent(postedStudent)
            .then(() = > res.status(ResponseStatus.CREATED).json(postedStudent)
    )
    .
        catch(error = > res.status(ResponseStatus.BAD_REQUEST).send(error.message)
    )
        ;
    })
        ;
        this.router.put('/', (req, res) = > {
            const postedStudent = req.body;
        this.studentRepository.updateStudent(postedStudent)
            .then(() = > res.status(ResponseStatus.OK).json(postedStudent)
    )
    .
        catch(error = > res.status(ResponseStatus.BAD_REQUEST).send(error.message)
    )
        ;
    })
        ;
        this.router.delete('/', (req, res) = > {
            const postedStudent = req.body;
        this.studentRepository.deleteStudent(postedStudent)
            .then(() = > res.status(ResponseStatus.OK).json(postedStudent)
    )
    .
        catch(error = > res.status(ResponseStatus.BAD_REQUEST).send(error.message)
    )
        ;
    })
        ;
        return this.router;
    }
}

exports.default = StudentRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxhYXRjaFxcT25lRHJpdmVcXEJ1cmVhdVxcbm9kZV90czJcXHNyY1xccm91dGVzXFxzdHVkZW50LXJvdXRlcy50cyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxhYXRjaFxcT25lRHJpdmVcXEJ1cmVhdVxcbm9kZV90czJcXHNyY1xccm91dGVzXFxzdHVkZW50LXJvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxzREFBd0M7QUFDeEMseURBQTBDO0FBSTFDO0lBR0ksWUFBWSxpQkFBb0M7UUFDNUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUMzQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDOztnQkFDN0MsSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVsQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRTtpQkFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFD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cnQgKiBhcyBSZXNwb25zZVN0YXR1cyBmcm9tICcuL3N0YXR1cydcclxuaW1wb3J0IFN0dWRlbnRSZXBvc2l0b3J5IGZyb20gXCIuLi9wZXJzaXN0ZW5jZS9zdHVkZW50LXJlcG9zaXRvcnlcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHVkZW50Um91dGVyIHtcclxuICAgIHByaXZhdGUgc3R1ZGVudFJlcG9zaXRvcnk6IFN0dWRlbnRSZXBvc2l0b3J5O1xyXG4gICAgcHVibGljIHJvdXRlcjogUm91dGVyO1xyXG4gICAgY29uc3RydWN0b3Ioc3R1ZGVudFJlcG9zaXRvcnk6IFN0dWRlbnRSZXBvc2l0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5zdHVkZW50UmVwb3NpdG9yeSA9IHN0dWRlbnRSZXBvc2l0b3J5O1xyXG4gICAgICAgIHRoaXMucm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuICAgICAgICB0aGlzLm1vdW50Um91dGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2FkZEZpbHRlcigpIHtcclxuICAgICAgICB0aGlzLnJvdXRlci5wYXJhbSgnaWQnLCAocmVxLCByZXMsIG5leHQsIGlkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihpZCkpIG5leHQoYGlkICR7aWR9IGlzIG5vdCBhIG51bWJlci4gYCk7XHJcbiAgICAgICAgICAgIGVsc2UgbmV4dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdW50Um91dGVzKCkge1xyXG4gICAgICAgIHRoaXMuX2FkZEZpbHRlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnJvdXRlci5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdHVkZW50UmVwb3NpdG9yeS5nZXRBbGxTdHVkZW50cygpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzdHVkZW50cyA9PiByZXMuc3RhdHVzKFJlc3BvbnNlU3RhdHVzLk9LKS5qc29uKHN0dWRlbnRzKSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5yb3V0ZXIuZ2V0KGAvOmlkYCwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gcmVxLnBhcmFtcy5pZDtcclxuICAgICAgICAgICAgdGhpcy5zdHVkZW50UmVwb3NpdG9yeS5nZXRTdHVkZW50QnlJZChpZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHN0dWRlbnQgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc3R1ZGVudCkgcmVzLnN0YXR1cyhSZXNwb25zZVN0YXR1cy5PSykuc2VuZChzdHVkZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHJlcy5zdGF0dXMoUmVzcG9uc2VTdGF0dXMuTk9UX0ZPVU5EKS5zZW5kKFwiU3R1ZGVudCBub3QgZm91bmQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucm91dGVyLnBvc3QoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdGVkU3R1ZGVudCA9IHJlcS5ib2R5O1xyXG4gICAgICAgICAgICB0aGlzLnN0dWRlbnRSZXBvc2l0b3J5LmNyZWF0ZVN0dWRlbnQocG9zdGVkU3R1ZGVudClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHJlcy5zdGF0dXMoUmVzcG9uc2VTdGF0dXMuQ1JFQVRFRCkuanNvbihwb3N0ZWRTdHVkZW50KSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiByZXMuc3RhdHVzKFJlc3BvbnNlU3RhdHVzLkJBRF9SRVFVRVNUKS5zZW5kKGVycm9yLm1lc3NhZ2UpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5yb3V0ZXIucHV0KCcvJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc3RlZFN0dWRlbnQgPSByZXEuYm9keTtcclxuICAgICAgICAgICAgdGhpcy5zdHVkZW50UmVwb3NpdG9yeS51cGRhdGVTdHVkZW50KHBvc3RlZFN0dWRlbnQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiByZXMuc3RhdHVzKFJlc3BvbnNlU3RhdHVzLk9LKS5qc29uKHBvc3RlZFN0dWRlbnQpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlcy5zdGF0dXMoUmVzcG9uc2VTdGF0dXMuQkFEX1JFUVVFU1QpLnNlbmQoZXJyb3IubWVzc2FnZSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnJvdXRlci5kZWxldGUoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdGVkU3R1ZGVudCA9IHJlcS5ib2R5O1xyXG4gICAgICAgICAgICB0aGlzLnN0dWRlbnRSZXBvc2l0b3J5LmRlbGV0ZVN0dWRlbnQocG9zdGVkU3R1ZGVudClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHJlcy5zdGF0dXMoUmVzcG9uc2VTdGF0dXMuT0spLmpzb24ocG9zdGVkU3R1ZGVudCkpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVzLnN0YXR1cyhSZXNwb25zZVN0YXR1cy5CQURfUkVRVUVTVCkuc2VuZChlcnJvci5tZXNzYWdlKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZXI7XHJcbiAgICB9XHJcbn0iXX0=